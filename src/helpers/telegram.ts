// Dependencies
import Telegraf, { Markup, Extra, ContextMessageUpdate } from 'telegraf'
import { UserModel, TodoModel, Todo, User } from '../models'
import * as moment from 'moment'
import { InstanceType } from 'typegoose'
import { isUserSubscribed } from './isUserSubscribed'
import { ExtraReplyMessage } from 'telegraf/typings/telegram-types'

export const bot = new Telegraf(process.env.TELEGRAM_LOGIN_TOKEN)

bot.command(['start', 'help'], ctx => {
  ctx.replyWithHTML(
    `Hi there! You can use this bot to quickly add new todos to todorant.com with /todo or /done commands. Make sure you login with the button below and set your timezone with /timezone command. Use /current to see your current task and complete it. Use /zen command to enter the zen mode. Find the commands examples at the end of this message. Cheers!

–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ todorant.com –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥ /todo –∏ /done. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–æ—à–ª–∏ –Ω–∞ —Å–∞–π—Ç –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏ —á—Ç–æ –≤—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–≤–æ–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–º–∞–Ω–¥—ã /timezone. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /current –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /zen, —á—Ç–æ–±—ã –≤–æ–π—Ç–∏ –≤ –¥–∑–µ–Ω-—Ä–µ–∂–∏–º. –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥ –≤ –∫–æ–Ω—Ü–µ —ç—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. –£–¥–∞—á–∏!

/frog Answer the gym membership email
/todo Buy milk
/todo 2025-01 Celebrate New Year on my private island
/todo 2020-04-20 Buy cookies
/done Procrastinate for 20 minutes
/timezone +3
/timezone -8
/timezone 0`,
    Extra.markdown().markup(
      Markup.inlineKeyboard([
        {
          text: 'Todorant login',
          login_url: {
            url: 'https://todorant.com',
          },
        } as any,
      ])
    )
  )
})

bot.use(attachUser)

bot.command(['todo', 'frog', 'done'], ctx => {
  // Get text
  let todoText = ctx.message.text.substr(6).trim()
  return addTodo(todoText, ctx)
})

bot.command('timezone', async ctx => {
  // Get and check timezone
  const timezone = ctx.message.text.substr(10).replace('+', '')
  if (
    isNaN(+timezone) ||
    timezone === '' ||
    +timezone > 12 ||
    +timezone < -12
  ) {
    return ctx.reply(`Please, use this command like shown below. Thank you!

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∏–∂–µ. –°–ø–∞—Å–∏–±–æ!

/timezone +3
/timezone -8
/timezone 0`)
  }
  // Get user
  const user = ctx.dbuser
  // Set timezone
  user.timezone = +timezone
  await user.save()
  // Respond
  const now = new Date()
  const utc = new Date(now.getTime() + now.getTimezoneOffset() * 60000)

  return ctx.reply(`Your timezone was set to UTC${
    timezone === '0' ? '+0' : timezone
  }. Please, check if the time below is your current time.

–í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ UTC${
    timezone === '0' ? '+0' : timezone
  }. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –≤—Ä–µ–º—è –Ω–∏–∂–µ ‚Äî —ç—Ç–æ –≤–∞—à–µ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è.

${moment(new Date(utc.getTime() + 3600000 * +timezone)).format(
  'YYYY-MM-DD HH:mm:ss'
)}`)
})

bot.command('zen', async ctx => {
  // Get user
  const user = ctx.dbuser
  user.telegramZen = !user.telegramZen
  await user.save()
  // Respond
  ctx.reply(
    user.telegramZen
      ? `Welcome to the zen mode! Anything you send me will be handled as if you had <code>/todo</code> command prepended. So don't bother sending <code>/todo Clean fridge</code> or <code>/todo 2020 Watch all of the House MD</code>, just do <code>Clean fridge</code> and <code>2020 Watch all of the House MD</code>. Use /zen to turn this mode off.
  
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–∑–µ–Ω-—Ä–µ–∂–∏–º! –í—Å–µ, —á—Ç–æ –≤—ã –º–Ω–µ –ø–æ—à–ª–µ—Ç–µ, –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è, –∫–∞–∫ –±—É–¥—Ç–æ –≤—ã –Ω–∞–ø–∏—Å–∞–ª–∏ –ø–µ—Ä–µ–¥ —ç—Ç–∏–º <code>/todo</code>. –ù–µ –Ω—É–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å <code>/todo –ü–æ—á–∏—Å—Ç–∏—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫</code> –∏–ª–∏ <code>/todo 2020 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ–≥–æ –î–æ–∫—Ç–æ—Ä–∞ –•–∞—É—Å–∞</code>, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—à–ª–∏—Ç–µ <code>–ü–æ—á–∏—Å—Ç–∏—Ç—å —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫</code> –∏–ª–∏ <code>2020 –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ–≥–æ –î–æ–∫—Ç–æ—Ä–∞ –•–∞—É—Å–∞</code>. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /zen, —á—Ç–æ–±—ã –æ—Ç–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç —Ä–µ–∂–∏–º.`
      : `You turned off zen mode.
  
–í—ã –≤—ã–∫–ª—é—á–∏–ª–∏ –¥–∑–µ–Ω-—Ä–µ–∂–∏–º.`,
    Extra.HTML(true) as ExtraReplyMessage
  )
})

bot.command('current', async ctx => {
  // Get user
  const user = ctx.dbuser
  // Get current
  const current = await findCurrentForUser(user)
  // Respond
  if (current) {
    ctx.reply(
      current.frog ? `üê∏ ${current.text}` : current.text,
      Markup.inlineKeyboard([
        Markup.callbackButton('‚úÖ', 'done'),
        Markup.callbackButton('‚è©', 'skip', current.skipped || current.frog),
        Markup.callbackButton('üîÑ', 'refresh'),
      ]).extra()
    )
  } else {
    ctx.reply(
      `üëç You did it! All the tasks for today are done, go get rest or maybe dance a little üíÉ
      
üëç –í—ã —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∏! –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∏–¥–∏—Ç–µ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ ‚Äî –Ω—É –∏–ª–∏ –ø–æ—Ç–∞–Ω—Ü—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ üíÉ`
    )
  }
})

bot.action('done', async ctx => {
  // Get user
  const user = ctx.dbuser
  // Get current
  const current = await findCurrentForUser(user)
  if (current) {
    current.completed = true
    await current.save()
  }
  // Respond
  ctx.answerCbQuery()
  // Update message
  return update(ctx, user)
})

bot.action('skip', async ctx => {
  // Get user
  const user = ctx.dbuser
  // Get current
  const current = await findCurrentForUser(user)
  if (current) {
    current.skipped = true
    await current.save()
  }
  // Respond
  ctx.answerCbQuery()
  // Update message
  return update(ctx, user)
})

bot.action('refresh', async ctx => {
  // Get user
  const user = ctx.dbuser
  // Respond
  ctx.answerCbQuery()
  // Update message
  return update(ctx, user)
})

bot.on('text', attachUser, ctx => {
  // Check if it's zen
  if (!ctx.dbuser.telegramZen) {
    return
  }
  // Check if not a command
  if (/^\//.test(ctx.message.text)) {
    return
  }
  // Add todo
  return addTodo(ctx.message.text, ctx)
})

async function addTodo(todoText: string, ctx: ContextMessageUpdate) {
  // Check if it has timestamp
  const full = todoText.substr(0, 10) // 2018-08-31
  const short = todoText.substr(0, 7) // 2018-08
  let monthAndYear = undefined
  let date = undefined
  if (/^\d{4}-\d{2}-\d{2}$/.test(full)) {
    const components = full.split('-')
    monthAndYear = `${components[0]}-${components[1]}`
    date = components[2]
    todoText = todoText.substr(11).trim()
  } else if (/^\d{4}-\d{2}$/.test(short)) {
    monthAndYear = short
    todoText = todoText.substr(8).trim()
  }
  // Check text
  if (!todoText) {
    return ctx.reply(`Please, provide text for this todo as shown below.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –∫ —ç—Ç–æ–π –∑–∞–¥–∞—á–µ —Ç–µ–∫—Å—Ç, –∫–∞–∫ –ø–æ–∫–∞–∑–∞–Ω–æ –Ω–∏–∂–µ.

/todo Buy milk`)
  }
  // Get user
  const user = ctx.dbuser
  // Check subscription
  if (!isUserSubscribed(user)) {
    return ctx.reply(`Please, subscribe at todorant.com to keep using the service.
    
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ todorant.com, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–º.`)
  }
  // Add todo to user
  try {
    // Get todo date
    const now = new Date()
    const utc = new Date(now.getTime() + now.getTimezoneOffset() * 60000)
    const nowWithOffset = new Date(
      utc.getTime() + 3600000 * (user.timezone || 0)
    )
    const month = nowWithOffset.getMonth() + 1
    // Check dates
    if (monthAndYear) {
      const pastError = `Date cannot be in the past.

–î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º.`
      const components = monthAndYear.split('-')
      const year = +components[0]
      const month = +components[1]

      const yearNow = nowWithOffset.getFullYear()
      if (year < yearNow) {
        return ctx.reply(pastError)
      }
      const monthNow = nowWithOffset.getMonth() + 1
      if (year === yearNow && month < monthNow) {
        return ctx.reply(pastError)
      }
      if (year === yearNow && !date && month === monthNow) {
        return ctx.reply(pastError)
      }
      const dateNow = nowWithOffset.getDate()
      if (year === yearNow && month === monthNow && date && +date < dateNow) {
        return ctx.reply(pastError)
      }
    }
    // Create todo
    const todo = {
      text: todoText,
      monthAndYear: monthAndYear
        ? monthAndYear
        : `${nowWithOffset.getFullYear()}-${month > 9 ? month : `0${month}`}`,
      date: monthAndYear
        ? date
        : `${
            nowWithOffset.getDate() > 9
              ? nowWithOffset.getDate()
              : `0${nowWithOffset.getDate()}`
          }`,
      frog: ctx.message.text.substr(1, 4) === 'frog',
      completed: ctx.message.text.substr(1, 4) === 'done',
    }
    if (user.settings.newTodosGoFirst) {
      user.todos = [
        (await new TodoModel({ ...todo, user: user._id }).save())._id,
      ].concat(user.todos)
    } else {
      user.todos = user.todos.concat([
        (await new TodoModel({ ...todo, user: user._id }).save())._id,
      ])
    }
    await user.save()
    // Respond
    ctx.reply('üëç', {
      reply_to_message_id: ctx.message.message_id,
    })
  } catch (err) {
    ctx.reply(`Oopsie, something went wrong!
    
–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.

${err.message}`)
  }
}

async function update(ctx: ContextMessageUpdate, user: InstanceType<User>) {
  // Get current
  const current = await findCurrentForUser(user)
  // Update message
  if (current) {
    ctx.editMessageText(
      current.frog ? `üê∏ ${current.text}` : current.text,
      Markup.inlineKeyboard([
        Markup.callbackButton('‚úÖ', 'done'),
        Markup.callbackButton('‚è©', 'skip', current.skipped || current.frog),
        Markup.callbackButton('üîÑ', 'refresh'),
      ]).extra()
    )
  } else {
    ctx.editMessageText(`üëç You did it! All the tasks for today are done, go get rest or maybe dance a little üíÉ
      
üëç –í—ã —ç—Ç–æ —Å–¥–µ–ª–∞–ª–∏! –í—Å–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –∏–¥–∏—Ç–µ –æ—Ç–¥–æ—Ö–Ω–∏—Ç–µ ‚Äî –Ω—É –∏–ª–∏ –ø–æ—Ç–∞–Ω—Ü—É–π—Ç–µ –Ω–µ–º–Ω–æ–≥–æ üíÉ`)
  }
}

async function attachUser(ctx: ContextMessageUpdate, next: Function) {
  // Get user
  const user = await UserModel.findOne({ telegramId: `${ctx.from.id}` })
  if (!user) {
    await ctx.replyWithHTML(
      `Please, login with the button below first.

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–æ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.`,
      Extra.markdown().markup(
        Markup.inlineKeyboard([
          {
            text: 'Todorant login',
            login_url: {
              url: 'https://todorant.com',
            },
          } as any,
        ])
      )
    )
  }
  // Attach user and continue
  ctx.dbuser = user
  return next()
}

async function findCurrentForUser(
  user: InstanceType<User>
): Promise<InstanceType<Todo>> {
  // Get date
  const now = new Date()
  const utc = new Date(now.getTime() + now.getTimezoneOffset() * 60000)
  const nowWithOffset = new Date(utc.getTime() + 3600000 * (user.timezone || 0))
  const month = nowWithOffset.getMonth() + 1
  const monthAndYear = `${nowWithOffset.getFullYear()}-${
    month > 9 ? month : `0${month}`
  }`
  const day =
    nowWithOffset.getDate() < 10
      ? `0${nowWithOffset.getDate()}`
      : nowWithOffset.getDate()
  // Find todos
  const todos = (
    await UserModel.findById(user.id).populate('todos')
  ).todos.filter((todo: Todo) => {
    return +todo.date === +day && todo.monthAndYear === monthAndYear
  }) as InstanceType<Todo>[]
  const incompleteTodos = todos
    .filter(t => !t.completed)
    .sort((a, b) => {
      if (a.frog && b.frog) {
        return 0
      }
      if (a.frog) {
        return -1
      }
      if (b.frog) {
        return 1
      }
      if (a.skipped && b.skipped) {
        return 0
      }
      if (a.skipped) {
        return 1
      }
      if (b.skipped) {
        return -1
      }
      return 0
    })
  // Return current
  return (incompleteTodos.length ? incompleteTodos[0] : undefined) as
    | InstanceType<Todo>
    | undefined
}

bot.catch(err => console.log(err))

bot.launch()
